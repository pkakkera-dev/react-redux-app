{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/ProductList.jsx","components/Cart.jsx","redux/actions/index.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["Header","props","className","Footer","connectedProductList","connect","state","photos","console","log","length","map","photo","key","id","title","Cart","getPhotos","type","payLoad","App","this","Component","connectedApp","dispatch","Boolean","window","location","hostname","match","initialState","photoReducer","action","Object","assign","concat","store","createStore","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQASeA,EANC,SAACC,GACb,OACI,yBAAKC,UAAU,UAAf,aCIOC,EANC,SAACF,GACb,OACI,yBAAKC,UAAU,UAAf,a,OC2BOE,EADcC,aALL,SAACC,GACrB,MAAO,CACHC,OAASD,EAAMC,UAGMF,EA1BR,SAACJ,GAElB,OADAO,QAAQC,IAAI,yBAA0BR,GAElC,yBAAKC,UAAU,eAEVD,EAAMM,QAAUN,EAAMM,OAAOG,OAAS,GACpCT,EAAMM,OAAOI,KAAI,SAACC,GACjB,OACI,yBAAKC,IAAKD,EAAME,GAAIZ,UAAU,kBACzBU,EAAMG,cCLhBC,EAND,SAACf,GACX,OACI,yBAAKC,UAAU,QAAf,WCUOe,G,MAdG,WAOV,MAAO,CACJC,KAAO,aACPC,QARS,CACJ,CAAEL,GAAG,EAAGC,MAAM,OACd,CAAED,GAAG,EAAGC,MAAM,OACd,CAAED,GAAG,EAAGC,MAAM,aCIxBK,E,2MACNd,MAAQ,G,mFAKNE,QAAQC,IAAI,8BAA8BY,KAAKpB,OAC/CoB,KAAKpB,MAAMgB,c,+BAGb,OACE,yBAAKf,UAAU,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAfcoB,aA6BHC,EADMlB,YAAQ,MALF,SAACmB,GAC1B,MAAO,CACLP,UAAY,kBAAMO,EAASP,SAGVZ,CAAkCe,GCzBnCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBAC,EAAe,CACjBvB,OAAS,IAaEwB,EAXM,WAAoC,IAAnCzB,EAAkC,uDAA1BwB,EAAcE,EAAY,uCAQpD,OANAxB,QAAQC,IAAI,sBAAsBH,EAAO,aAAc0B,GACnC,eAAhBA,EAAOd,KACIe,OAAOC,OAAO,GAAI5B,EAAO,CAAEC,OAASD,EAAMC,OAAO4B,OAAOH,EAAOb,WAE/Db,GCHJ8B,EAFDC,YAAYN,GCG1BvB,QAAQC,IAAI,mBAAoB2B,GAChC5B,QAAQC,IAAI,yBAA0B2B,EAAME,YAC5CC,IAASC,OAAO,kBAAC,IAAD,CAAUJ,MAAOA,GACzB,kBAAC,EAAD,OACSK,SAASC,eAAe,SHwHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c665fcf6.chunk.js","sourcesContent":["\nimport React from 'react';\n\nconst Header  = (props) => {\n    return (\n        <div className='header'> Header </div>\n    )\n}\n\nexport default Header;","\nimport React from 'react';\n\nconst Footer  = (props) => {\n    return (\n        <div className='footer'> Footer </div>\n    )\n}\n\nexport default Footer;","\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n\nconst ProductList  = (props) => {\n    console.log('ProductList :: props- ', props)\n    return (\n        <div className='productList'> \n        {\n           ( props.photos && props.photos.length > 0 ) && (\n               props.photos.map((photo)=>{\n                return (\n                    <div key={photo.id} className='productDetails'>\n                        {photo.title}\n                    </div>\n                )\n               })\n           )\n    \n        }\n         \n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        photos : state.photos\n    }\n}\nconst connectedProductList = connect(mapStateToProps)(ProductList);\nexport default connectedProductList;","\nimport React from 'react';\n\nconst Cart  = (props) => {\n    return (\n        <div className='cart'> Cart </div>\n    )\n}\n\nexport default Cart;","\nconst getPhotos = () => {\n        let pList = [\n                { id:1, title:\"one\"},\n                { id:2, title:\"two\"},\n                { id:3, title:\"three\"}\n            ];\n\n        return {\n           type : 'GET_PHOTOS',\n           payLoad : pList \n        }\n        \n}\n\nexport default getPhotos;","import React,{ Component } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport ProductList from './components/ProductList';\nimport Cart from './components/Cart';\nimport './css/style.css';\nimport getPhotos from './redux/actions/index';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\nstate = {\n\n} \n\ncomponentDidMount() {\n  console.log('componentDidMount :: props ',this.props);\n  this.props.getPhotos();\n}\nrender() {\nreturn (\n  <div className='appContainer'>  \n    <Header />\n    <ProductList/>\n    <Cart />\n    <Footer />\n\n  </div>\n)\n\n}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getPhotos : () => dispatch(getPhotos())\n  }\n}\nconst connectedApp = connect(null, mapDispatchToProps)(App)\nexport default connectedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    photos : []\n}; \nconst photoReducer = (state = initialState, action ) => {\n    let newState = {};\n    console.log('reducers :: state- ',state, ', action- ', action);\n    if( action.type === 'GET_PHOTOS') {\n        newState = Object.assign({}, state, { photos : state.photos.concat(action.payLoad)})\n    }else {\n        newState = state;\n    };\n    return newState;\n}\n\nexport default photoReducer;","import { createStore } from 'redux';\nimport photoReducer from '../reducers/index';\n\n\nconst store = createStore(photoReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/index';\n\nconsole.log('index.js::store-', store);\nconsole.log('index.js::store state-', store.getState());\nReactDOM.render(<Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}