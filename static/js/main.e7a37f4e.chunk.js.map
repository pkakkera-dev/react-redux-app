{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/ProductDetail.jsx","redux/actions/cartAction.js","components/ProductList.jsx","components/CartItem.jsx","components/Cart.jsx","App.js","redux/actions/productAction.js","serviceWorker.js","redux/reducers/productReducer.js","redux/reducers/cartReducer.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["connectedHeader","connect","state","itemsCount","cartReducer","cartItems","length","props","className","Footer","connectedProductDetail","dispatch","myAction","selectedItem","type","payload","addToCart","alt","src","photo","thumbnailUrl","title","onClick","item","console","log","connectedProductList","photos","photoReducer","map","key","id","removeItem","removeFromCart","connectedCart","itemsFromStore","App","this","getPhotosUsingThunk","Component","connectedApp","a","async","axios","get","then","response","data","splice","catch","err","Boolean","window","location","hostname","match","initialState","action","Object","assign","concat","filter","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7a37f4e.chunk.js","sourcesContent":["\nimport React from 'react';\nimport { connect } from 'react-redux'\n\nconst Header  = (props) => {\n    return (\n        <div className='header'>\n            <div className='logo-container'></div>\n            <div className='main-container'></div>\n            <div className='cart-item-container'>\n                <span className='item-counter'>{props.itemsCount + ' : Items'}</span>\n            </div>\n            \n        </div>\n    )\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        itemsCount : state.cartReducer.cartItems.length\n    }\n}\n\nconst connectedHeader = connect(mapStateToProps)(Header)\n\nexport default connectedHeader;","\nimport React from 'react';\n\nconst Footer  = (props) => {\n    return (\n        <div className='footer'> \n            <div className='sub-footer'> Footer </div>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport { addToCart } from '../redux/actions/cartAction'\nimport { connect } from 'react-redux'\nconst ProductDetail = (props) => {\n\n    const addToCartHandler = (item) => {\n        console.log('addToCartHandler--', item)\n        props.myAction(item)\n\n    }\n    return(\n        <div className='product-detail'>\n            <div className='product-img'>\n                <img alt='Prd-img' src={props.photo.thumbnailUrl}></img>\n            </div>\n            <div className='product-dsc'>\n                <span>{props.photo.title}</span>\n            </div>\n            <div className='btn-section'>\n                <button className='add-to-cart-btn' onClick={()=> addToCartHandler(props.photo)}> Add to Cart</button>\n            </div>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        myAction : ( selectedItem )=> dispatch(addToCart(selectedItem))\n    }\n}\n\nconst connectedProductDetail = connect(null, mapDispatchToProps)(ProductDetail)\n\nexport default connectedProductDetail;","\nexport const addToCart = (selectedItem) => {\n\n    return {\n        type: 'ADD_TO_CART',\n        payload: selectedItem\n    }\n}\n\nexport const removeFromCart = ( selectedItem ) => {\n\n    return {\n        type : \"REMOVE_FROM_CART\",\n        payload: selectedItem\n    }\n}","\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ProductDetail  from './ProductDetail'\n\n\nconst ProductList  = (props) => {\n    return (\n        <div className='productList'> \n        {\n           ( props.photos && props.photos.length > 0 ) && (\n               props.photos.map((photo)=>{\n                return (\n                    <ProductDetail key={photo.id} photo={photo}/>\n                )\n               })\n           )\n    \n        }\n         \n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    console.log('mapStateToProps-- productlist - state ::', state)\n    return {\n        photos : state.photoReducer.photos\n    }\n}\n\nconst connectedProductList = connect(mapStateToProps)(ProductList);\nexport default connectedProductList;\n//const connectedProductDetail = connect(mapDispatchToProps)(ProductDetail)\n","import React from 'react';\nimport { removeFromCart } from '../redux/actions/cartAction'\nimport { connect } from 'react-redux'\nconst CartItem = (props) => {\n\n    const removeCartHandler = (item) => {\n        console.log('removeCartHandler--', item)\n        props.removeItem(item)\n\n    }\n    return(\n        <div className='product-detail'>\n            <div className='product-img'>\n                <img alt='Prd-img' src={props.item.thumbnailUrl}></img>\n            </div>\n            <div className='product-dsc'>\n                <span>{props.item.title}</span>\n            </div>\n            <div className='btn-section'>\n                <button className='add-to-cart-btn' onClick={()=> removeCartHandler(props.item)}> Remove </button>\n            </div>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        removeItem : ( selectedItem ) => dispatch(removeFromCart(selectedItem))\n    }\n    \n}\n\nexport default connect(null,mapDispatchToProps)(CartItem);","\nimport React from 'react';\nimport { connect } from 'react-redux'\nimport CartItem from './CartItem'\n\nconst Cart  = (props) => {\n    console.log('cart-items: ', props)\n    return (\n        <div className='cart'> \n        { props && props.itemsFromStore && (\n            props.itemsFromStore.map(( item )=> <CartItem key={item.id} item={item}/>)\n        )}\n            \n         </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        itemsFromStore : state.cartReducer.cartItems\n    }\n}\n\nconst connectedCart = connect(mapStateToProps)(Cart)\n\nexport default connectedCart;","import React,{ Component } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport ProductList from './components/ProductList';\nimport Cart from './components/Cart';\nimport './css/style.css';\nimport { getPhotosUsingThunk } from './redux/actions/productAction';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\nstate = {\n} \n\ncomponentDidMount() {\n  //console.log('componentDidMount :: props ',this.props);\n  //this.props.getPhotos();\n  this.props.getPhotosUsingThunk();\n}\nrender() {\nreturn (\n  <div className='appContainer'>  \n    <Header />\n    <ProductList/>\n    <Cart type={'cricket'}/>\n    <Footer />\n\n  </div>\n)\n\n}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // getPhotos : () => dispatch(getPhotos()),\n    getPhotosUsingThunk : () => dispatch(getPhotosUsingThunk())\n  }\n}\nconst connectedApp = connect(null, mapDispatchToProps)(App)\nexport default connectedApp;\n","import axios from 'axios';\nexport const getPhotos = () => {\n        let pList = [\n                { id:1, title:\"one\"},\n                { id:2, title:\"two\"},\n                { id:3, title:\"three\"}\n            ];\n\n        return {\n           type : 'GET_PHOTOS',\n           payload : pList \n        }\n        \n}\n\nexport const getPhotosUsingThunk = (dispatch) => {\n\treturn async (dispatch) => {\n\t\treturn await axios.get('https://jsonplaceholder.typicode.com/photos')\n\t\t.then(response => {\n\t\t\t//console.log(\"axiox-------\",response)\n\t\t\tdispatch({\n\t\t\t\ttype: 'GET_PHOTOS_THUNK',\n\t\t\t\tpayload: response.data.splice(4950)\n\t\t\t})\n\t\t})\n\t\t.catch(err => console.log('GET_PHOTOS_THUNK-- error', err))\n\t\t}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    photos : []\n}; \nconst photoReducer = (state = initialState, action ) => {\n    let newState = {};\n    // console.log('photo reducers :: state- ',state, ', action- ', action);\n    if( action.type === 'GET_PHOTOS') {\n        newState = Object.assign({}, state, { photos : state.photos.concat(action.payload)})\n    }else if( action.type === 'GET_PHOTOS_THUNK') {\n        newState = Object.assign({}, state, { photos : state.photos.concat(action.payload)})\n    }\n    else {\n        newState = state;\n    };\n    return newState;\n}\n\nexport default photoReducer;","\nconst initialState = {\n    cartItems : []\n}; \nconst cartReducer = (state = initialState, action ) => {\n    let newState = {};\n    // console.log('cart reducers :: state- ',state, ', action- ', action);\n    if( action.type === 'ADD_TO_CART') {\n        newState = Object.assign({}, state, { cartItems : state.cartItems.concat(action.payload)})\n    }else if( action.type === 'REMOVE_FROM_CART') {\n        newState = Object.assign({}, state, { cartItems : state.cartItems.filter(item =>{\n            return item.id !== action.payload.id\n        })})\n    }\n    else {\n        newState = state;\n    };\n    return newState;\n}\n\nexport default cartReducer;","import { combineReducers } from 'redux';\nimport photoReducer from './productReducer';\nimport cartReducer from './cartReducer'\n\n\nconst rootReducer = combineReducers({\n    photoReducer, cartReducer\n})\n\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/index';\n\nconsole.log('index.js::store-', store);\nconsole.log('index.js::store state-', store.getState());\nReactDOM.render(<Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}